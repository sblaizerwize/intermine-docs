<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Salomon Marquez</title>
    <link>https://sblaizerwize.github.io/posts/</link>
    <description>Recent content in Posts on Salomon Marquez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Nov 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sblaizerwize.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy Airbyte on a Microsoft Azure VM</title>
      <link>https://sblaizerwize.github.io/posts/airbyte-azure-vm/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/airbyte-azure-vm/</guid>
      <description>Disclaimer:
I created this document based on an open source contribution to Airbyte. Please refer to the source document at Deploy on Azure   This page guides you through deploying Airbyte Open Source on a Microsoft Azure VM by setting up the deployment environment, installing and starting Airbyte, and connecting it to the VM.
Note:
The instructions have been tested on a standard DS1 v2 (1 vcpu, 3.5 GiB memory) Microsoft Azure VM with Ubuntu 18.</description>
    </item>
    
    <item>
      <title>What Are Two Key Differences Between BigQuery and Redshift?</title>
      <link>https://sblaizerwize.github.io/posts/bigqueryvsredshift/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/bigqueryvsredshift/</guid>
      <description>Big Data. We often hear about this word but we aren’t quite sure how to define it. Literature says that having more than 1 TB of data can be considered as Big Data. After getting a mild idea of the concept, our next question would be: How can we manage such a large amount of data to find useful insights out of it? Well, one approach that can answer this lies in data warehousing.</description>
    </item>
    
    <item>
      <title>How to Create Python Packages</title>
      <link>https://sblaizerwize.github.io/posts/pythonpackages/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/pythonpackages/</guid>
      <description>A Python package is a collection of modules. A module is the easiest way to import and reuse existing Python code that’s developed by other programmers. In simple terms, a package is a module, but not all modules are packages. So, the question that raises is: what differentiates a package from a module? The response lies in a file named __init__.py, which indicates that the folder directory is a package. In this article, we’ll walk you through the main concepts and steps about how to create, install, publish, and test your own Python package locally and globally.</description>
    </item>
    
    <item>
      <title>Fundamentals of Dictionaries</title>
      <link>https://sblaizerwize.github.io/posts/fundamentalsofdictionaries/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/fundamentalsofdictionaries/</guid>
      <description>Let’s say you want to create an inventory of your video games. You are interested in storing information like name, genre, platforms, and ratings. You would like to access this information simply by knowing the name of the video game. Instead of using a database, you compare how practical it is to use dictionaries rather than lists. With a list, you need to store the information sequentially and scan through the whole list to find a particular video game name.</description>
    </item>
    
    <item>
      <title>Julia Documentation Project</title>
      <link>https://sblaizerwize.github.io/posts/season-docs-julia/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/season-docs-julia/</guid>
      <description>This is a sample document that illustrates how I audited, developed, and presented a proposal for the Julia Language project for the Google Season of Docs 2021 edition
The Julia Language Proposal for Season of Docs 2021 I would like to express my interest in participating in the project named Create a Comprehensive Julia Contributing Guide that is taking part in the Google Season of Docs 2021. Currently, I am looking for opportunities to contribute and sum efforts to the open-source software (OSS) community.</description>
    </item>
    
    <item>
      <title>Sympy Documentation Project</title>
      <link>https://sblaizerwize.github.io/posts/season-docs-sympy/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/season-docs-sympy/</guid>
      <description>This is a sample document that illustrates how I audited, developed, and presented a proposal for the Sympy project for the Google Season of Docs 2021 edition
SymPy Proposal for Season of Docs 2021 I want to express my interest in participating in the project named Documentation Organization - SymPy that is taking part in the Google Season of Docs 2021. Currently, I am looking for opportunities to contribute and sum up efforts to the open-source software (OSS) community.</description>
    </item>
    
    <item>
      <title>Software Architecture Guide</title>
      <link>https://sblaizerwize.github.io/posts/architecture-guide/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/architecture-guide/</guid>
      <description>The purpose of this guide is to describe the software architecture of the Betelgeuse application and its interaction with third-party applications. This document is useful to the developers and stakeholders of Orion who are implementing or updating new features for the Betelgeuse application.
 Introduction Betelgeuse is a serverless application hosted in the AWS cloud. Unlike the monolithic architecture of the previous Betelgeuse system, Betelgeuse is implemented as a containerized .</description>
    </item>
    
    <item>
      <title>Deploying Betelgeuse App using Octopus</title>
      <link>https://sblaizerwize.github.io/posts/how-to-guide/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/how-to-guide/</guid>
      <description>This guide explains you how to manually deploy to the AWS Cloud any of the following Betelgeuse projects using Octopus deploy:
 Orion.Client Orion.Bellatrix Orion.Rigel Orion.Saiph  Note:
These projects are automatically deployed to the development and testing environments. Both environments share the same projects and versions. For the laboratory environment, some of these packages are deployed manually.  The deployment process of Betelgeuse projects is detailed in the Architecture Guide.</description>
    </item>
    
    <item>
      <title>Intermine Documentation Project</title>
      <link>https://sblaizerwize.github.io/posts/season-docs-intermine/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/season-docs-intermine/</guid>
      <description>This is a sample document that illustrates how I audited, developed, and presented a proposal for the Intermine project for the Google Season of Docs 2020 edition
Welcome to the InterMine Documentation Site InterMine is an open source data warehouse build specifically for the integration and analysis of complex biological data. In this site you can find documentation and tutorials to get you up to speed with our brand new platform BlueGenes.</description>
    </item>
    
    <item>
      <title>API Documentation</title>
      <link>https://sblaizerwize.github.io/posts/api-guide/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sblaizerwize.github.io/posts/api-guide/</guid>
      <description>This document explains the implementation of BlueSnap payment processor with SampleClient web services. It describes the payment logic, provides use cases, and shows the payment sequence diagrams for each case. The target audience of this document includes stakeholders, developers, and project managers from SampleClient and MyEnterprise.
 Overview SampleClient requires to integrate BlueSnap as an alternative payment processor for its web services. SampleClient payment processors include:
 Stripe Humboldt Paysafe Safecharge  The first stage of BlueSnap implementation with SampleClient enables payments using a credit card.</description>
    </item>
    
  </channel>
</rss>